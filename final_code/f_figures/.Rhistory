mean_length <- read.csv("data/length_means.csv")
#import DSDP 596 IAR data
IAR.596 <- read.csv("data/DSDP_596_Fish_Accumulation_siteid_1_132.csv")
IAR.596 <- IAR.596[(IAR.596$age > min(mean_length$age)) & (IAR.596$age < max(mean_length$age)), ]
#set path to total length data
teeth_total <- read.csv("data/teeth_total.csv")
#prepare temperature and length tests
o_df1 <- data.frame(age = as.numeric(o_data$Age_Ma), d18O = as.numeric(o_data$d18O_loess_smooth))
o_df1 = o_df1[(o_df1$age >= min(mean_length$age)) & (o_df1$age <= max(mean_length$age)), ]
#compute rolling mean of temperature data
o_roll <- data.frame(rollmean(o_df1, 100))
#set plotting vars
yaxis.age <- c(65, 46)
axis.scale <- 0.77
text.scale <- 1.2
pt.scale <- 1.4
#plot temperature (but hide it)
par(mfrow = c(1, 3),
oma = c(8, 4, 4.5, 0.5),  #set outer margins for axis labels
mar = c(0, 0, 0, 0))  # set plot martins to be very squished together
hide <- plot(x = o_roll$d18O, y = o_roll$age, type = 'n', pch = 16,
col = 'darkcyan', ylim = yaxis.age, cex = pt.scale,
xlim = c(max(o_roll$d18O), min(o_roll$d18O)),
bty = 'n', axes = FALSE, xlab = '', ylab = '')
#get rect coordinates
usr <- par("usr")
xleft <- usr[1]
xright <- usr[2]
ybottom <- 53
ytop <- 49
rec.col <- 'gray90'
#plot rectangle
par(mfg = c(1, 1))
rect(xleft, ybottom, xright, ytop, col = rec.col, border = rec.col)
par(mfg = c(1, 2))
rect(xleft, ybottom, xright, ytop, col = rec.col, border = rec.col)
par(mfg = c(1, 3))
rect(xleft, ybottom, xright, ytop, col = rec.col, border = rec.col)
par(new = T, mfrow = c(1, 3),
oma = c(8, 4, 4.5, 0.5),  #set outer margins for axis labels
mar = c(0, 0, 0, 0))  # set plot martins to be very squished together
iar.axis.text <- expression(paste('IODP 1553 IAR (ich 38-150 ', mu, 'm ', 'cm'^'-2','Myr'^'-1',')'))
eo.col <- adjustcolor('lightskyblue', alpha.f = 0.3)
#plot temperature
par(mfg = c(1, 1))
plot(x = o_roll$d18O, y = o_roll$age, type = 'o', pch = 16, col = 'darkcyan', ylim = yaxis.age, cex = pt.scale,
xlim = c(max(o_roll$d18O), min(o_roll$d18O)),
bty = 'n', axes = FALSE, xlab = '', ylab = '')
axis(1) # D18O values
mtext (text = expression(paste(delta, ''^'18', 'O')), side = 1, line = 2.5, cex = axis.scale)
axis(2, at=seq(46,65, by=2)) #age axis
mtext(text = 'Age (Ma)', side = 2, line = 2.5, cex = axis.scale)
#plot IAR
plot(x = iar$IAR, y = iar$age, type = 'o', pch = 16, col = 'chocolate', ylim = yaxis.age, cex = pt.scale,
xlim = c(0, max(iar$IAR)),
bty = 'n', axes = FALSE, xlab = '', ylab = '')
axis(1) # IAR values
mtext (text = iar.axis.text, side = 1, line = 2.5, cex = axis.scale)
par(new = TRUE)
plot(x = IAR.596$ich_accum, y = IAR.596$age, type = 'o', pch = 18, col=adjustcolor('darkorchid', alpha=0.45), ylim = yaxis.age, cex = pt.scale,
xlim = c(0, max(IAR.596$ich_accum)),
bty = 'n', axes = FALSE, xlab = '', ylab = '')
axis(3)
mtext (text = expression(paste('DSDP 596 IAR (ich >106 ', mu, 'm ','cm'^'-2','Myr'^'-1', ')')), side = 3, line = 2.5, cex = axis.scale)
legend("topright", legend = c("IODP 1553", "DSDP 596"), col = c("chocolate", 'darkorchid'), pch = 16, bty = "n", inset = c(0.05, 0.02))
#plot mean length
gam_5 <- gam(length~s(Age, k=5), data=teeth_total)
x_vals <- seq(min(teeth_total$Age), max(teeth_total$Age), length = 100)
new_data <- data.frame(Age = x_vals)
pred <- predict(gam_5, newdata = new_data, se.fit = TRUE)
y_pred <- pred$fit
se <- pred$se.fit
ci <- 1.96 * se  # Assuming a normal distribution, 1.96 corresponds to a 95% confidence level
lower <- y_pred - ci
upper <- y_pred + ci
# plot(x_vals, y_pred, xlab = "x", ylab = "Response", type = "l")
# lines(x_vals, lower, col = "blue", lty = "dashed")
# lines(x_vals, upper, col = "blue", lty = "dashed")
plot(y_pred, x_vals, type = "l", bty = 'n', axes = FALSE, xlab = '',
ylab = '', ylim = yaxis.age, xlim = c(min(mean_length$mean_length), max(mean_length$mean_length)))
points(mean_length$mean_length, mean_length$age, pch = 16)
polygon(c(lower, rev(upper)), c(x_vals, rev(x_vals)), col=adjustcolor('dodgerblue', alpha=0.25), border = NA)
axis(1) # length values
mtext (text = "Mean length (unit?)", side = 1, line = 2.5, cex = axis.scale)
######## Cross plot ############
match_d18O <- c()
for(i in 1:length(iar$age)) {
ind <- which(abs(o_roll$age-iar$age[i])==min(abs(o_roll$age-iar$age[i])))
if (ind == 1) {
match_d18O[i] <- o_roll$d18O[ind]
}
else{
match_d18O[i] <- mean(o_roll$d18O[(ind-2):(ind+2)])
}
}
d18O_IAR <- data.frame(age = iar$age, d18O = match_d18O, IAR = iar$IAR)
match_d18O_596 <- c()
for(i in 1:length(IAR.596$age)) {
match_d18O_596[i] <- o_roll$d18O[which(abs(o_roll$age-IAR.596$age[i])==min(abs(o_roll$age-IAR.596$age[i])))]
}
d18O_IAR_596 <- data.frame(age = IAR.596$age, d18O = match_d18O_596, IAR = IAR.596$ich_accum)
#cut to points <62 million years
d18O_IAR <- d18O_IAR[-which(d18O_IAR$age > 62), ]
summary(lm(log(d18O_IAR$IAR) ~ d18O_IAR$d18O))
par(mfrow = c(1, 2))
par(mar = c(5, 4, 4, 2))
model <-lm(log(IAR)~d18O, d18O_IAR)
newx <- seq(min(d18O_IAR$d18O), max(d18O_IAR$d18O), by = 0.01)
new_data <- data.frame(d18O = newx)
pred <- predict(model, newdata = new_data, se.fit = TRUE)
y_pred <- pred$fit
se <- pred$se.fit
ci <- 1.96 * se  # Assuming a normal distribution, 1.96 corresponds to a 95% confidence level
lower <- y_pred - ci
upper <- y_pred + ci
cf1 <- coef(model)
slope.1 <- round(cf1[2], 3)
axis.scale <- 0.8
plot(log(d18O_IAR$IAR)~d18O_IAR$d18O, xlim = rev(range(d18O_IAR$d18O)),
pch = 16, xlab = '', ylab = '')
lines(newx, lower, lty = 2)
lines(newx, upper, lty = 2)
abline(model)
mtext(text = expression(paste(delta, ''^'18', 'O')), side = 1, line = 2.5, cex = 1.0)
mtext(text = expression(paste('log(IAR) [ich cm'^'-2','Myr'^'-1', ']')), side = 2, line = 2.5, cex = axis.scale)
mtext(text = "IODP 1553", cex = 1)
r2 <- round(summary(model)$r.squared, 4)
pval <- summary(model)$coefficients[, "Pr(>|t|)"]
pval <- round(pval[2], 4)
text(0.4, 9.75, bquote(paste('R'^'2',' = ', .(r2))), cex = 0.8)
# text(0.4, 9.55, bquote(paste('P = ', .(pval))), cex = 0.8)
text(0.4, 9.55, bquote(paste('P < 0.01 ')), cex = 0.8)
text(0.4, 9.35, bquote(paste('slope = ', .(slope.1))), cex = 0.8)
#create model for 596
model.2 <-lm(log(IAR)~d18O, data = d18O_IAR_596)
newx.2 <- seq(min(d18O_IAR_596$d18O), max(d18O_IAR_596$d18O), by = 0.01)
newer_data <- data.frame(d18O = newx.2)
pred.2 <- predict(model.2, newdata = newer_data, se.fit = TRUE)
y_pred <- pred.2$fit
se <- pred.2$se.fit
ci <- 1.96 * se  # Assuming a normal distribution, 1.96 corresponds to a 95% confidence level
lower <- y_pred - ci
upper <- y_pred + ci
cf2 <- coef(model.2)
slope.2 <- round(cf2[2], 3)
plot(log(d18O_IAR_596$IAR) ~ d18O_IAR_596$d18O, xlim = rev(range(d18O_IAR_596$d18O)),
pch = 16, xlab = '', ylab = '')
lines(newx.2, lower, lty = 2)
lines(newx.2, upper, lty = 2)
abline(model.2)
mtext(text = expression(paste(delta, ''^'18', 'O')), side = 1, line = 2.5, cex = 1.0)
mtext(text = expression(paste('log(IAR) [ich cm'^'-2','Myr'^'-1', ']')), side = 2, line = 2.5, cex = axis.scale)
mtext(text = "DSDP 596", cex = 1)
r2 <- round(summary(model.2)$r.squared, 3)
# pval <- summary(model.2)$coefficients[, "Pr(>|t|)"]
# pval <- round(pval[2], 22)
text(0.4, 5.5, bquote(paste('R'^'2',' = ', .(r2))), cex = 0.8)
# text(0.4, 5.3, bquote(paste('P = ', .(pval))), cex = 0.8)
text(0.4, 5.3, bquote(paste('P < 0.01 ')), cex = 0.8)
text(0.4, 5.1, bquote(paste('slope = ', .(slope.2))), cex = 0.8)
###################################
a <- lm(IAR ~ age + ns(d18O), data = d18O_IAR)
summary(a)
a <- lm(IAR ~ ns(d18O), data = d18O_IAR)
summary(a)
a <- lm(IAR ~ age + ns(d18O), data = d18O_IAR)
summary(a)
a <- lm(IAR ~ age * ns(d18O), data = d18O_IAR)
summary(a)
a <- lm(IAR ~ ns(age) * d18O, data = d18O_IAR)
summary(a)
a <- lm(IAR ~ ns(d18O), data = d18O_IAR)
summary(a)
a <- lm(IAR ~ ns(age) + d18O, data = d18O_IAR)
summary(a)
?acf
acf(d18O_IAR$IAR)
acf(d18O_IAR$d18O)
?acf
model <-lm(log(IAR)~d18O, d18O_IAR)
plot(model)
plot(model)
plot(model)
library(lmtest)
dwtest(model)
View(d18O_IAR)
write.csv(d18O_IAR, file = "/Users/icbissell/Desktop/IAR.csv", row.names = FALSE)
library(vegan)
install.packages("vegan")
library(vegan)
morphs <- read.csv("data/ToothMorph_V0.4_Morphotypes - Chas_U1553.csv")
save_pdf <- FALSE
if (save_pdf == TRUE) {
pdf(file = "plots/morph_time.pdf", width = 10, height = 8)
}
morphs <- morphs[!morphs$Alias=="",]
morph.age <- data.frame(age = morphs$Age, morphotype = morphs$Alias)
# morph.age$group <- 1
# morph.age$group[which(morph.age$age <= 60 )] <- "G1"
# morph.age$group[which(morph.age$age > 60 )] <- "G2"
morph.counts <- table(morph.age)
# m.c <- data.frame(morph.counts)
# m.c$age <- as.numeric(as.character(m.c$age))
# m.c$group <- 1
# m.c$group[which(m.c$age <= 60 )] <- "G1"
# m.c$group[which(m.c$age > 60 )] <- "G2"
test <- vegdist(morph.counts, method="bray")
#test2 <- metaMDS(test, k=2)
test3 <- metaMDS(test, k=5)
age.vec<-as.numeric(rownames(morph.counts))
age.vec <- round(age.vec, 2)
plot(test3)
pts <- test3$points
text(x=pts[,1], y=pts[,2], labels = age.vec, pos=3, offset=0.35, cex=0.8)
for(i in 1:(length(age.vec)-1)) {
segments(pts[i,1], pts[i,2], pts[i+1,1], pts[i+1,2], lty=1, col='purple', lwd=2)
}
#figure out how to get ellipses on here (add age breaks into 'groups')
ordiellipse(test3, groups = morph.age$group)
ordiellipse(test3, groups = morph.age$group)
plot(ordiellipse(test3, groups = morph.age$group))
library(vegan)
morphs <- read.csv("data/ToothMorph_V0.4_Morphotypes - Chas_U1553.csv")
save_pdf <- FALSE
if (save_pdf == TRUE) {
pdf(file = "plots/morph_time.pdf", width = 10, height = 8)
}
morphs <- morphs[!morphs$Alias=="",]
morph.age <- data.frame(age = morphs$Age, morphotype = morphs$Alias)
# morph.age$group <- 1
# morph.age$group[which(morph.age$age <= 60 )] <- "G1"
# morph.age$group[which(morph.age$age > 60 )] <- "G2"
morph.counts <- table(morph.age)
# m.c <- data.frame(morph.counts)
# m.c$age <- as.numeric(as.character(m.c$age))
# m.c$group <- 1
# m.c$group[which(m.c$age <= 60 )] <- "G1"
# m.c$group[which(m.c$age > 60 )] <- "G2"
test <- vegdist(morph.counts, method="bray")
test2 <- metaMDS(test, k=2)
#test3 <- metaMDS(test, k=5)
age.vec<-as.numeric(rownames(morph.counts))
age.vec <- round(age.vec, 2)
plot(test3)
pts <- test3$points
text(x=pts[,1], y=pts[,2], labels = age.vec, pos=3, offset=0.35, cex=0.8)
for(i in 1:(length(age.vec)-1)) {
segments(pts[i,1], pts[i,2], pts[i+1,1], pts[i+1,2], lty=1, col='purple', lwd=2)
}
#figure out how to get ellipses on here (add age breaks into 'groups')
ordiellipse(test3, groups = morph.age$group)
library(vegan)
morphs <- read.csv("data/ToothMorph_V0.4_Morphotypes - Chas_U1553.csv")
save_pdf <- FALSE
if (save_pdf == TRUE) {
pdf(file = "plots/morph_time.pdf", width = 10, height = 8)
}
morphs <- morphs[!morphs$Alias=="",]
morph.age <- data.frame(age = morphs$Age, morphotype = morphs$Alias)
# morph.age$group <- 1
# morph.age$group[which(morph.age$age <= 60 )] <- "G1"
# morph.age$group[which(morph.age$age > 60 )] <- "G2"
morph.counts <- table(morph.age)
# m.c <- data.frame(morph.counts)
# m.c$age <- as.numeric(as.character(m.c$age))
# m.c$group <- 1
# m.c$group[which(m.c$age <= 60 )] <- "G1"
# m.c$group[which(m.c$age > 60 )] <- "G2"
test <- vegdist(morph.counts, method="bray")
test2 <- metaMDS(test, k=2)
#test3 <- metaMDS(test, k=5)
age.vec<-as.numeric(rownames(morph.counts))
age.vec <- round(age.vec, 2)
plot(test2)
pts <- test2$points
text(x=pts[,1], y=pts[,2], labels = age.vec, pos=3, offset=0.35, cex=0.8)
for(i in 1:(length(age.vec)-1)) {
segments(pts[i,1], pts[i,2], pts[i+1,1], pts[i+1,2], lty=1, col='purple', lwd=2)
}
#figure out how to get ellipses on here (add age breaks into 'groups')
ordiellipse(test3, groups = morph.age$group)
?counties
library(sf)
library(terra)
install.packages("terra")
library(sf)
library(terra)
library(tigris)
install.packages("tigris")
library(sf)
library(terra)
library(tigris)
library(tidyverse)
library(gstat)
install.packages("gstat")
library(sf)
library(terra)
library(tigris)
library(tidyverse)
library(gstat)
?counties
CA <- counties(state = "CA")
View(CA)
ggplot() +
geom_sf(data = CA)
if (!require("rspat")) remotes::install_github("rspatial/rspat")
library(rspat)
knitr::opts_chunk$set(echo = TRUE)
CA <- counties(state = "CA")
ggplot() +
geom_sf(data = CA)
if (!require("rspat")) remotes::install_github("rspatial/rspat")
library(rspat)
data <- spat_data("precipitation")
mnts <- toupper(month.abb)
data$prec <- rowSums(data[, mnts])
head(data)
station_pnts <- st_as_sf(data, coords = c("LONG", "LAT"), crs = "+proj=longlat +datum=NAD83")
head(station_pnts)
station_pnts <- st_as_sf(data, coords = c("LONG", "LAT"), crs = "+proj=longlat +datum=NAD83")
head(station_pnts)
ggplot() +
geom_sf(data = CA, fill = NA) +
geom_sf(data = station_pnts, aes(color = ALT)) +
labs(color = "Altitude")
station_terra <- vect(data, c("LONG", "LAT"), crs = "+proj=longlat +datum=NAD83")
TA <- "+proj=aea +lat_1=34 +lat_2=40.5 +lat_0=0 +lon_0=-120 +x_0=0 +y_0=-4000000 +datum=WGS84 +units=m"
station_terra <- project(station_terra, TA)
plot(station_terra)
RMSE <- function(observed, predicted) {
sqrt(mean((predicted - observed)^2, na.rm = TRUE))
}
RMSE <- function(observed, predicted) {
sqrt(mean((predicted - observed)^2, na.rm = TRUE))
}
RMSE <- function(observed, predicted) {
sqrt(mean((predicted - observed)^2, na.rm = TRUE))
}
null <- RMSE(mean(station_terra$prec), station_terra$prec)
null
?rmse
?RMSE
v <- voronoi(station_terra)
plot(v)
plot(station_terra, add = T, pch = 20)
v <- voronoi(station_terra)
plot(v)
plot(station_terra, add = T, pch = 20)
cata <- project(spat_data("counties"), TA)
vca <- crop(v, cata)
plot(vca, "prec")
r <- rast(vca, res = 10000)
vr <- rasterize(vca, r, "prec")
plot(vr)
set.seed(5132015)
kf <- sample(1:5, nrow(station_terra), replace = TRUE)
rmse <- rep(NA, 5)
for (k in 1:5) {
test <- station_terra[kf == k, ]
train <- station_terra[kf != k, ]
v <- voronoi(train)
p <- terra::extract(v, test)
rmse[k] <- RMSE(test$prec, p$prec)
}
rmse
mean(rmse)
perf <- 1 - (mean(rmse) / null)
round(perf, 3)
d <- data.frame(geom(station_terra)[, c("x", "y")], as.data.frame(station_terra))
head(d)
gs <- gstat(formula = prec ~ 1, locations = ~ x + y, data = d, nmax = 5, set = list(idp = 0))
nn <- interpolate(r, gs, debug.level = 0)
nnmsk <- mask(nn, vr)
plot(nnmsk, 1)
rmsenn <- rep(NA, 5)
for (k in 1:5) {
test <- d[kf == k, ]
train <- d[kf != k, ]
gscv <- gstat(formula = prec ~ 1, locations = ~ x + y, data = train, nmax = 5, set = list(idp = 0))
p <- predict(gscv, test, debug.level = 0)$var1.pred
rmsenn[k] <- RMSE(test$prec, p)
}
rmsenn
mean(rmsenn)
1 - (mean(rmsenn) / null)
gs <- gstat(formula = prec ~ 1, locations = ~ x + y, data = d, set = list(idp = 2))
idw <- interpolate(r, gs, debug.level = 0)
idwr <- mask(idw, vr)
plot(idwr, 1)
rmse <- rep(NA, 5)
for (k in 1:5) {
test <- d[kf == k, ]
train <- d[kf != k, ]
gs <- gstat(formula = prec ~ 1, locations = ~ x + y, data = train, set = list(idp = 2))
p <- predict(gs, test, debug.level = 0)
rmse[k] <- RMSE(test$prec, p$var1.pred)
}
rmse
mean(rmse)
1 - (mean(rmse) / null)
gs2 <- gstat(formula = prec ~ 1, locations = ~ x + y, data = d, nmax = 1, set = list(idp = 1))
gs2 <- gstat(formula = prec ~ 1, locations = ~ x + y, data = d, nmax = 1, set = list(idp = 1))
gs2 <- gstat(formula = prec ~ 1, locations = ~ x + y, data = d, nmax = 1, set = list(idp = 1))
idw <- interpolate(r, gs2, debug.level = 0)
idwr <- mask(idw, vr)
plot(idwr, 1)
par(mfrow = c(2,1))
plot(idwr, 1)
plot(idwr, 1)
par(mfrow = c(2,1))
plot(idwr, 1)
knitr::opts_chunk$set(echo = TRUE)
library(sf)
library(terra)
library(tigris)
library(tidyverse)
library(gstat)
CA <- counties(state = "CA")
ggplot() +
geom_sf(data = CA)
if (!require("rspat")) remotes::install_github("rspatial/rspat")
library(rspat)
data <- spat_data("precipitation")
mnts <- toupper(month.abb)
data$prec <- rowSums(data[, mnts])
head(data)
station_pnts <- st_as_sf(data, coords = c("LONG", "LAT"), crs = "+proj=longlat +datum=NAD83")
head(station_pnts)
ggplot() +
geom_sf(data = CA, fill = NA) +
geom_sf(data = station_pnts, aes(color = ALT)) +
labs(color = "Altitude")
station_terra <- vect(data, c("LONG", "LAT"), crs = "+proj=longlat +datum=NAD83")
TA <- "+proj=aea +lat_1=34 +lat_2=40.5 +lat_0=0 +lon_0=-120 +x_0=0 +y_0=-4000000 +datum=WGS84 +units=m"
station_terra <- project(station_terra, TA)
plot(station_terra)
RMSE <- function(observed, predicted) {
sqrt(mean((predicted - observed)^2, na.rm = TRUE))
}
null <- RMSE(mean(station_terra$prec), station_terra$prec)
null
v <- voronoi(station_terra)
plot(v)
plot(station_terra, add = T, pch = 20)
cata <- project(spat_data("counties"), TA)
vca <- crop(v, cata)
plot(vca, "prec")
r <- rast(vca, res = 10000)
vr <- rasterize(vca, r, "prec")
plot(vr)
set.seed(5132015)
kf <- sample(1:5, nrow(station_terra), replace = TRUE)
rmse <- rep(NA, 5)
for (k in 1:5) {
test <- station_terra[kf == k, ]
train <- station_terra[kf != k, ]
v <- voronoi(train)
p <- terra::extract(v, test)
rmse[k] <- RMSE(test$prec, p$prec)
}
rmse
mean(rmse)
perf <- 1 - (mean(rmse) / null)
round(perf, 3)
d <- data.frame(geom(station_terra)[, c("x", "y")], as.data.frame(station_terra))
head(d)
gs <- gstat(formula = prec ~ 1, locations = ~ x + y, data = d, nmax = 5, set = list(idp = 0))
nn <- interpolate(r, gs, debug.level = 0)
nnmsk <- mask(nn, vr)
plot(nnmsk, 1)
rmsenn <- rep(NA, 5)
for (k in 1:5) {
test <- d[kf == k, ]
train <- d[kf != k, ]
gscv <- gstat(formula = prec ~ 1, locations = ~ x + y, data = train, nmax = 5, set = list(idp = 0))
p <- predict(gscv, test, debug.level = 0)$var1.pred
rmsenn[k] <- RMSE(test$prec, p)
}
rmsenn
mean(rmsenn)
1 - (mean(rmsenn) / null)
gs <- gstat(formula = prec ~ 1, locations = ~ x + y, data = d, set = list(idp = 2))
idw <- interpolate(r, gs, debug.level = 0)
idwr <- mask(idw, vr)
plot(idwr, 1)
rmse <- rep(NA, 5)
for (k in 1:5) {
test <- d[kf == k, ]
train <- d[kf != k, ]
gs <- gstat(formula = prec ~ 1, locations = ~ x + y, data = train, set = list(idp = 2))
p <- predict(gs, test, debug.level = 0)
rmse[k] <- RMSE(test$prec, p$var1.pred)
}
rmse
mean(rmse)
1 - (mean(rmse) / null)
gs2 <- gstat(formula = prec ~ 1, locations = ~ x + y, data = d, nmax = 1, set = list(idp = 1))
idw2 <- interpolate(r, gs2, debug.level = 0)
idwr2 <- mask(idw2, vr)
plot(idwr2, 1)
par(mfrow = c(1,2))
plot(idwr, 1)
plot(idwr, 1)
par(mfrow = c(1,2))
plot(idwr, 1)
plot(idwr2, 1)
?gstate
?gstat
plot(idwr, 1)
plot(idwr2, 1)
?addroads
library(cholera)

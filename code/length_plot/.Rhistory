pnorm(0, mean = 4, sd = 3.202)
1- pnorm(0, mean = 4, sd = 3.202)
dbinom(140, size = 250, prob = 0.5)
dbinom(125, size = 250, prob = 0.5)
probs = dbinom(c(0:250), 250, 0.5)
plot(c(0:250), probs)
pbinom(140, 250, 0.5)
1-pbinom(140, 250, 0.5)
exp = 250*0.5
var = 250*0.5*0.5
sd = sqrt(var)
z = (140-exp)/sd
10pnorm(z)
1-pnorm(z)
binom.test(140, 250, p = 0.5)
x = c(1:6)
y = (6^c/factorial(c))*exp(-6)
y = (power(6,c)/factorial(c))*exp(-6)
c
y = (power(6,x)/factorial(x))*exp(-6)
x
power(6,x)
6^x
y = ((6^x)/factorial(x))*exp(-6)
plot(x,y)
sum(y)
x = c(1:1000)
y = dnorm(x, mean = 54, sd = sqrt(54))
plot(x,y)
?seq
x = seq(0,200, by=0.1)
y = dnorm(x, mean = 54, sd = sqrt(54))
plot(x,y)
1 - pnorm(65, 54, sqrt(54))
1 - pnorm(65, 54, 54)
1/sqrt(1000)
1/sqrt(20)
pbinom(4, 5, 0.8)
1- dbinom(18, 20, 0.8)
dbinom(18, 20, 0.8)
dbinom(4, 5, 0.8)
1- pbinom(18, 20, 0.8)
dbinom(140, 250, 0.3)
dbinom(140, 250, 0.5)
pbinom(140, 250, 0.5)
?pbinom
1- pbinom(140, 250, 0.5)
1- dbinom(140, 250, 0.5)
dbinom(140, 250, 0.5)
1- pbinom(140, 250, 0.5)
pbinom(140, 250, 0.5)
pbinom(139, 250, 0.5)
1- pbinom(139, 250, 0.5)
1- pbinom(17, 20, 0.8)
1- pbinom(18, 20, 0.8)
dbinom(18, 20, 0.8)+dbinom(19, 20, 0.8)+dbinom(20, 20, 0.8)
?plot
library(ape)
?plot
?ape
rProp <- 38/380
iProp <- 246/573
prop.test(x = c(rProp, iProp), n = c(380, 573), conf.level = 0.95, correct = FALSE)
prop.test(x = c(rProp, iProp), n = c(380, 573), conf.level = .95, correct = FALSE)
knitr::opts_chunk$set(echo = TRUE)
library(ape)
# Load data import, wrangling, and plotting tools from the Tidyverse.
# See https://r4ds.had.co.nz/ for more
library(tidyverse)
library(magrittr)
trace_jc =
read_tsv("output_jc/primates_cytb_JC.log")
trace_jc =
read_tsv("output_jc/primates_cytb_JC.log")
trace_jc =
read_tsv("output_jc/primates_cytb_JC.log")
trace_jc %<>%                           # Read the data
mutate(Replicate_ID = as.factor(Replicate_ID))                       # Convert the replicate id to a factor
trace_jc %<>% mutate(Iteration = Iteration %/% length(levels(trace_jc$Replicate_ID)))  # The iterations are sequenctial across all replicates. Rescale them so that they are in number of generations per replicate, rather than total number of samples
trace_jc %>%
ggplot(aes(x=Iteration, y=TL, col=Replicate_ID), alpha=0.2) + geom_line()
trace_jc %>%
ggplot(aes(x=Iteration, y=Likelihood, col=Replicate_ID), alpha=0.2) + geom_line()
trace_jc %>%
filter( Iteration > 2500 ) %>%
ggplot(aes(x=Iteration, y=TL, col=Replicate_ID), alpha=0.2) + geom_line()
trace_jc %>%
filter( Iteration > 2500 ) %>%
ggplot(aes(x=Iteration, y=Likelihood, col=Replicate_ID), alpha=0.2) + geom_line()
trace_jc %>%
filter( Iteration > 2500 ) %>%
ggplot(aes(TL, fill = Replicate_ID, colour = Replicate_ID)) +
geom_density(alpha = 0.1)
trace_jc %>%
filter( Iteration > 2500 ) %>%
ggplot(aes(Likelihood, fill = Replicate_ID, colour = Replicate_ID)) +
geom_density(alpha = 0.1)
trace_gtr =
read_tsv("output_gtr/primates_cytb_GTR.log")
trace_gtr %<>%                           # Read the data
mutate(Replicate_ID = as.factor(Replicate_ID))                       # Convert the replicate id to a factor
trace_gtr %>%
ggplot(aes(x=Iteration, y=TL, col=Replicate_ID), alpha=0.2) + geom_line()
trace_gtr =
read_tsv("output_gtr/primates_cytb_GTR.log")
trace_gtr %>%
ggplot(aes(x=Iteration, y=TL), alpha=0.2) + geom_line()
trace_gtr %>%
ggplot(aes(x=Iteration, y=Likelihood), alpha=0.2) + geom_line()
trace_gtr %>%
ggplot(aes(x=Iteration, y=TL), alpha=0.2) + geom_line()
trace_gtr %>%
ggplot(aes(x=Iteration, y=Likelihood), alpha=0.2) + geom_line()
trace_gtrig =
read_tsv("output_gtrig/primates_cytb_GTRGI.log")
trace_gtrig %>%
ggplot(aes(x=Iteration, y=TL), alpha=0.2) + geom_line()
trace_gtrig %>%
ggplot(aes(x=Iteration, y=Likelihood), alpha=0.2) + geom_line()
trace_gtrig %>%
ggplot(aes(x=Iteration, y=Alpha), alpha=0.2) + geom_line()
trace_gtrig %>%
ggplot(aes(x=Iteration, y=alpha), alpha=0.2) + geom_line()
trace_gtr %>%
ggplot(aes(x=Iteration, y=Prior), alpha=0.2) + geom_line()
trace_gtr %>%
ggplot(aes(x=Iteration, y=Likelihood), alpha=0.2) + geom_line()
trace_gtr %>%
ggplot(aes(x=Iteration, y=TL), alpha=0.2) + geom_line()
tinytex::install_tinytex()
library(ichthyoliths)
library(viridis)
library(zoo)
library(egg)
library(mgcv)
library(ggplot2)
setwd("/Users/icbissell/Documents/research/Eocene_teeth/code/figures")
dev.off()
library(ichthyoliths)
library(viridis)
library(zoo)
library(egg)
library(mgcv)
library(ggplot2)
setwd("/Users/icbissell/Documents/research/Eocene_teeth/code/figures")
#dev.off()
######## Morphotypes over time rangechart ############
morphs <- read.csv("data/ToothMorph_V0.4_Morphotypes - Chas_U1553.csv")
save_pdf <- FALSE
if (save_pdf == TRUE) {
pdf(file = "plots/morph_time.pdf", width = 10, height = 8)
}
morphs <- morphs[!morphs$Alias=="",]
morph.age <- data.frame(age = morphs$Age, morphotype = morphs$Alias)
morph.counts <- table(morph.age)
col.rangechart <- viridis(5)
col.rangechart[1] <- 'gray70'
par(mar = c(12, 5, 3, 3))
# xax<-rangechart(counts, reorder = 'lad.by.fad', normalize.counts = FALSE,
#                 col.points = 'by.count', cols.vec = col.rangechart, count.breaks = c(0, 1, 3, 5), # 1, 2, 3, 4-5, 6+
#                 cex.points = 'by.count', largesize = 1,
#                 xaxis.labels = 'alphanum', yaxis.ticks = TRUE,
#                 print.xaxis = T, main = '', ylab = 'Age (Ma)')
hide<-rangechart(morph.counts, reorder = 'fad.by.lad', normalize.counts = TRUE,
col.points = 'by.count', cols.vec = col.rangechart, count.breaks = c(0, 1, 3, 5, 7, 10), # 1, 2, 3, 4-5, 6+
cex.points = 'by.count', largesize = 1,
xaxis.labels = 'names', yaxis.ticks = TRUE,
print.xaxis = T, main = '', ylab = 'Age (Ma)', cex.yaxis = 0.8, cex.xaxis = 0.75)
#get rect coordinates
usr <- par("usr")
xleft <- usr[1]
xright <- usr[2]
ybottom <- 53
ytop <- 49
rec.col <- 'gray90'
#plot rectangle
rect(xleft, ybottom, xright, ytop, col = rec.col, border = rec.col)
#plot again on top of rectangle
par(new = T)
rangechart(morph.counts, reorder = 'fad.by.lad', normalize.counts = TRUE,
col.points = 'by.count', cols.vec = col.rangechart, count.breaks = c(0, 1, 3, 5, 7, 10), # 1, 2, 3, 4-5, 6+
cex.points = 'by.count', largesize = 1,
xaxis.labels = 'names', yaxis.ticks = TRUE,
print.xaxis = T, main = '', ylab = 'Age (Ma)', cex.yaxis = 0.8, cex.xaxis = 0.75)
axis(side = 2, at = round(as.numeric(rownames(morph.counts)), 2), las = 1, cex.axis = 0.8, tck = -0.01)
legend('bottomright', legend = c('1', '2-3', '4-5', '6-10', '11+'),
pch = c(16),
col = c(col.rangechart),
pt.cex = c(1, 1.25, 1.5, 1.75, 2),
ncol = 4, title = 'Tooth Count', title.adj = 0.5, cex = 0.5)
################################################
######## Vars over time ############
#add datasets
#set path to Westerhold oxygen data
o_data <- read.csv("data/Westerhold_2020_Oxygen_Carbon_smooth.csv")
#set path to IAR data
iar <- read.csv("data/iar.csv")
#set path to mean length data
mean_length <- read.csv("data/length_means.csv")
#import DSDP 596 IAR data
IAR.596 <- read.csv("data/DSDP_596_Fish_Accumulation_siteid_1_132.csv")
IAR.596 <- IAR.596[(IAR.596$age > min(mean_length$age)) & (IAR.596$age < max(mean_length$age)), ]
#set path to total length data
teeth_total <- read.csv("data/teeth_total.csv")
#prepare temperature and length tests
o_df1 <- data.frame(age = as.numeric(o_data$Age_Ma), d18O = as.numeric(o_data$d18O_loess_smooth))
o_df1 = o_df1[(o_df1$age >= min(mean_length$age)) & (o_df1$age <= max(mean_length$age)), ]
#compute rolling mean of temperature data
o_roll <- data.frame(rollmean(o_df1, 100))
#set plotting vars
yaxis.age <- c(65, 46)
axis.scale <- 0.77
text.scale <- 1.2
pt.scale <- 1.4
#plot temperature (but hide it)
par(mfrow = c(1, 3),
oma = c(8, 4, 4.5, 0.5),  #set outer margins for axis labels
mar = c(0, 0, 0, 0))  # set plot martins to be very squished together
hide <- plot(x = o_roll$d18O, y = o_roll$age, type = 'n', pch = 16,
col = 'darkcyan', ylim = yaxis.age, cex = pt.scale,
xlim = c(max(o_roll$d18O), min(o_roll$d18O)),
bty = 'n', axes = FALSE, xlab = '', ylab = '')
#get rect coordinates
usr <- par("usr")
xleft <- usr[1]
xright <- usr[2]
ybottom <- 53
ytop <- 49
rec.col <- 'gray90'
#plot rectangle
par(mfg = c(1, 1))
rect(xleft, ybottom, xright, ytop, col = rec.col, border = rec.col)
par(mfg = c(1, 2))
rect(xleft, ybottom, xright, ytop, col = rec.col, border = rec.col)
par(mfg = c(1, 3))
rect(xleft, ybottom, xright, ytop, col = rec.col, border = rec.col)
par(new = T, mfrow = c(1, 3),
oma = c(8, 4, 4.5, 0.5),  #set outer margins for axis labels
mar = c(0, 0, 0, 0))  # set plot martins to be very squished together
iar.axis.text <- expression(paste('IODP 1553 IAR (ich 38-106 ', mu, 'm ', 'cm'^'-2','Myr'^'-1',')'))
eo.col <- adjustcolor('lightskyblue', alpha.f = 0.3)
#plot temperature
par(mfg = c(1, 1))
plot(x = o_roll$d18O, y = o_roll$age, type = 'o', pch = 16, col = 'darkcyan', ylim = yaxis.age, cex = pt.scale,
xlim = c(max(o_roll$d18O), min(o_roll$d18O)),
bty = 'n', axes = FALSE, xlab = '', ylab = '')
axis(1) # D18O values
mtext (text = expression(paste(delta, ''^'18', 'O')), side = 1, line = 2.5, cex = axis.scale)
axis(2, at=seq(46,65, by=2)) #age axis
mtext(text = 'Age (Ma)', side = 2, line = 2.5, cex = axis.scale)
#plot IAR
plot(x = iar$IAR, y = iar$age, type = 'o', pch = 16, col = 'chocolate', ylim = yaxis.age, cex = pt.scale,
xlim = c(0, max(iar$IAR)),
bty = 'n', axes = FALSE, xlab = '', ylab = '')
axis(1) # IAR values
mtext (text = iar.axis.text, side = 1, line = 2.5, cex = axis.scale)
par(new = TRUE)
plot(x = IAR.596$ich_accum, y = IAR.596$age, type = 'o', pch = 18, col=adjustcolor('darkorchid', alpha=0.45), ylim = yaxis.age, cex = pt.scale,
xlim = c(0, max(IAR.596$ich_accum)),
bty = 'n', axes = FALSE, xlab = '', ylab = '')
axis(3)
mtext (text = expression(paste('DSDP 596 IAR (ich >106 ', mu, 'm ','cm'^'-2','Myr'^'-1', ')')), side = 3, line = 2.5, cex = axis.scale)
legend("topright", legend = c("IODP 1553", "DSDP 596"), col = c("chocolate", 'darkorchid'), pch = 16, bty = "n", inset = c(0.05, 0.02))
#plot mean length
gam_5 <- gam(length~s(Age, k=5), data=teeth_total)
x_vals <- seq(min(teeth_total$Age), max(teeth_total$Age), length = 100)
new_data <- data.frame(Age = x_vals)
pred <- predict(gam_5, newdata = new_data, se.fit = TRUE)
y_pred <- pred$fit
se <- pred$se.fit
ci <- 1.96 * se  # Assuming a normal distribution, 1.96 corresponds to a 95% confidence level
lower <- y_pred - ci
upper <- y_pred + ci
# plot(x_vals, y_pred, xlab = "x", ylab = "Response", type = "l")
# lines(x_vals, lower, col = "blue", lty = "dashed")
# lines(x_vals, upper, col = "blue", lty = "dashed")
plot(y_pred, x_vals, type = "l", bty = 'n', axes = FALSE, xlab = '',
ylab = '', ylim = yaxis.age, xlim = c(min(mean_length$mean_length), max(mean_length$mean_length)))
points(mean_length$mean_length, mean_length$age, pch = 16)
polygon(c(lower, rev(upper)), c(x_vals, rev(x_vals)), col=adjustcolor('dodgerblue', alpha=0.25), border = NA)
axis(1) # length values
mtext (text = "Mean length (unit?)", side = 1, line = 2.5, cex = axis.scale)
######## Cross plot ############
match_d18O <- c()
for(i in 1:length(iar$age)) {
match_d18O[i] <- o_roll$d18O[which(abs(o_roll$age-iar$age[i])==min(abs(o_roll$age-iar$age[i])))]
}
d18O_IAR <- data.frame(age = iar$age, d18O = match_d18O, IAR = iar$IAR)
match_d18O_596 <- c()
for(i in 1:length(IAR.596$age)) {
match_d18O_596[i] <- o_roll$d18O[which(abs(o_roll$age-IAR.596$age[i])==min(abs(o_roll$age-IAR.596$age[i])))]
}
d18O_IAR_596 <- data.frame(age = IAR.596$age, d18O = match_d18O_596, IAR = IAR.596$ich_accum)
#cut to points <62 million years
d18O_IAR <- d18O_IAR[-which(d18O_IAR$age > 62), ]
summary(lm(log(d18O_IAR$IAR) ~ d18O_IAR$d18O))
par(mfrow = c(1, 2))
par(mar = c(5, 4, 4, 2))
model <-lm(log(IAR)~d18O, d18O_IAR)
newx <- seq(min(d18O_IAR$d18O), max(d18O_IAR$d18O), by = 0.01)
new_data <- data.frame(d18O = newx)
pred <- predict(model, newdata = new_data, se.fit = TRUE)
y_pred <- pred$fit
se <- pred$se.fit
ci <- 1.96 * se  # Assuming a normal distribution, 1.96 corresponds to a 95% confidence level
lower <- y_pred - ci
upper <- y_pred + ci
cf1 <- coef(model)
slope.1 <- cf1[2]
plot(log(d18O_IAR$IAR)~d18O_IAR$d18O, xlim = rev(range(d18O_IAR$d18O)),
pch = 16, xlab = '', ylab = '')
lines(newx, lower, lty = 2)
lines(newx, upper, lty = 2)
abline(model)
mtext(text = expression(paste(delta, ''^'18', 'O')), side = 1, line = 2.5, cex = 1.0)
mtext(text = expression(paste('log(IAR) [ich cm'^'-2','Myr'^'-1', ']')), side = 2, line = 2.5, cex = axis.scale)
mtext(text = "IODP 1553", cex = 1)
r2 <- round(summary(model)$r.squared, 3)
pval <- summary(model)$coefficients[, "Pr(>|t|)"]
pval <- pval[2]
text(0.4, 9.75, bquote(paste('R'^'2',' = ', .(r2))), cex = 0.8)
text(0.4, 9.55, bquote(paste('P = ', .(pval))), cex = 0.8)
text(0.4, 9.35, bquote(paste('slope = ', .(slope.1))), cex = 0.8)
#create model for 596
model.2 <-lm(log(IAR)~d18O, data = d18O_IAR_596)
newx.2 <- seq(min(d18O_IAR_596$d18O), max(d18O_IAR_596$d18O), by = 0.01)
newer_data <- data.frame(d18O = newx.2)
pred.2 <- predict(model.2, newdata = newer_data, se.fit = TRUE)
y_pred <- pred.2$fit
se <- pred.2$se.fit
ci <- 1.96 * se  # Assuming a normal distribution, 1.96 corresponds to a 95% confidence level
lower <- y_pred - ci
upper <- y_pred + ci
cf2 <- coef(model.2)
slope.2 <- cf2[2]
plot(log(d18O_IAR_596$IAR) ~ d18O_IAR_596$d18O, xlim = rev(range(d18O_IAR_596$d18O)),
pch = 16, xlab = '', ylab = '')
lines(newx.2, lower, lty = 2)
lines(newx.2, upper, lty = 2)
abline(model.2)
mtext(text = expression(paste(delta, ''^'18', 'O')), side = 1, line = 2.5, cex = 1.0)
mtext(text = expression(paste('log(IAR) [ich cm'^'-2','Myr'^'-1', ']')), side = 2, line = 2.5, cex = axis.scale)
mtext(text = "DSDP 596", cex = 1)
r2 <- round(summary(model.2)$r.squared, 3)
pval <- summary(model.2)$coefficients[, "Pr(>|t|)"]
pval <- pval[2]
text(0.4, 5.5, bquote(paste('R'^'2',' = ', .(r2))), cex = 0.8)
text(0.4, 5.3, bquote(paste('P = ', .(pval))), cex = 0.8)
text(0.4, 5.1, bquote(paste('slope = ', .(slope.2))), cex = 0.8)
###################################
View(d18O_IAR)
min(d18O_IAR$IAR)
max(d18O_IAR$IAR)
View(d18O_IAR_596)
min(d18O_IAR_596)
min(d18O_IAR_596$IAR)
max(d18O_IAR_596$IAR)
q <- lm(d18O_IAR$IAR, d18O_IAR_596)
q <- lm(d18O_IAR$IAR~d18O_IAR_596$IAR)
q <- lm(mean_length$mean_length, d18O_IAR$d18O)
mean_length <- mean_length[-which(mean_length$age > 62), ]
q <- lm(mean_length$mean_length~d18O_IAR$d18O)
View(mean_length)
d18O_IAR <- data.frame(age = iar$age, d18O = match_d18O, IAR = iar$IAR)
View(d18O_IAR)
match_d18O <- c()
for(i in 1:length(iar$age)) {
match_d18O[i] <- o_roll$d18O[which(abs(o_roll$age-iar$age[i])==min(abs(o_roll$age-iar$age[i])))]
}
d18O_IAR <- data.frame(age = iar$age, d18O = match_d18O, IAR = iar$IAR)
View(d18O_IAR)
#cut to points <62 million years
d18O_IAR <- d18O_IAR[-which(d18O_IAR$age > 62), ]
summary(lm(log(d18O_IAR$IAR) ~ d18O_IAR$d18O))
View(mean_length)
mean_length <- mean_length[-1, ]
View(mean_length)
q <- lm(mean_length$mean_length~d18O_IAR$d18O)
summary(q)
plot(mean_length$mean_length~d18O_IAR$d18O)
plot(mean_length)
plot(mean_length$mean_length)
plot(mean_length$mean_length)
plot(d18O_IAR$d18O)
plot(rev(d18O_IAR$d18O))
lm(mean_length$mean_length~d18O_IAR$d18O)
plot(mean_length$mean_length~d18O_IAR$d18O)
abline(q)
hist(mean_length$mean_length)
summar(mean_length$mean_length)
summary(mean_length$mean_length)
a <- lm(mean_length$age, mean_length$mean_length)
a <- lm(mean_length$age~ mean_length$mean_length)
a
plot(a)
qqnorm(a)
View(mean_length)
library(stringr)
library(car)
library(ggplot2)
library(plyr)
library(zoo)
#set code directory
setwd("/Users/icbissell/Documents/research/Eocene_teeth/code/length_plot")
#set path to lengths dataset
teeth_total <- read.csv("data/teeth_total.csv")
#set path to Westerhold oxygen data
o_data <- read.csv("data/Westerhold_2020_Oxygen_Carbon_smooth.csv")
#add column that sets length as the max of width and length
teeth_total$length <- pmax(teeth_total$Height, teeth_total$Width)
#compute quantiles
length_means <- aggregate(teeth_total$length, list(teeth_total$Age), FUN = mean)
names(length_means)[names(length_means) == "Group.1"] <- "age"
names(length_means)[names(length_means) == "x"] <- "mean_length"
length_quant_95 <- aggregate(teeth_total$length, list(teeth_total$Age), FUN = quantile, probs = 0.95)
length_quant_75 <- aggregate(teeth_total$length, list(teeth_total$Age), FUN = quantile, probs = 0.75)
length_quant_25 <- aggregate(teeth_total$length, list(teeth_total$Age), FUN = quantile, probs = 0.25)
length_medians <- aggregate(teeth_total$length, list(teeth_total$Age), FUN = median)
#plot detrended anomaly from mean line
model <- lm(length_means$mean_length ~ length_means$age)
curve_df <- data.frame(time = length_means$age, resi = model$residuals)
plot(curve_df$time, curve_df$resi, pch = 19)
polygon(x = c(min(curve_df$time), curve_df$time, max(curve_df$time)),
y = c(0, curve_df$resi, 0), col = "skyblue")
clip(x1 = min(curve_df$time), x2 = max(curve_df$time), y1 = min(curve_df$resi),y2 = 0)
polygon(x = c(min(curve_df$time), curve_df$time, max(curve_df$time)),
y = c(0, curve_df$resi, 0),
col = "tomato")
#plot various quantiles
plot(length_quant_95$Group.1, length_quant_95$x, col = 'green', pch = 16, ylim = c(50, 550))
points(length_quant_75$Group.1, length_quant_75$x, col = 'red', pch = 16)
points(length_quant_25$Group.1, length_quant_25$x, col = 'orange', pch = 16)
points(length_medians$Group.1, length_medians$x, col = 'black', pch = 16)
#plot full dataset with trend line
scatterplot(teeth_total$length ~ as.numeric(teeth_total$Age), log = "y")
#plot violin plot of total dataset
teeth_total$age_round = round(teeth_total$Age, digits = 1)
pViol <- ggplot(teeth_total, aes(x = as.factor(age_round), y = length, fill = factor(age_round))) +
geom_violin() +
geom_boxplot(width = .2) +
scale_fill_hue(rainbow(length(unique(teeth_total$SampleID))))
pViol
#plot mean lengths vs temperature
o_data <- read.csv("/Users/icbissell/Documents/research/Eocene_teeth/code/IAR_time/data/Westerhold_2020_Oxygen_Carbon_smooth.csv")
o_df1 <- data.frame(age = as.numeric(o_data$Age_Ma), d18O = as.numeric(o_data$d18O_loess_smooth))
o_df1 = o_df1[(o_df1$age >= 47) & (o_df1$age <= 65), ]
d180.range <- c(1, -1) #ylim = rev(range(o_df1$d18O))
plot(rollmean(o_df1, k = 50), type = 'l', ylim = d180.range,
xlim = c(65, 47), ylab = "d18O")
axis(side=1, at = pretty(range(o_df1$age, na.rm = TRUE), n =10))
axis(side=2, at = pretty(range(o_df1$d18O, na.rm = TRUE)))
par(new = TRUE)
plot(length_means$age, length_means$mean_length, xlim = rev(c(min(length_means$age), max(length_means$age))), type = 'p', col = 'red', pch = 16, axes = FALSE, xlab = "", ylab = "")
axis(4)
mtext("mean length", side=4, line=-1.5)
#prepare temperature and length tests
o_df1 <- data.frame(age = as.numeric(o_data$Age_Ma), d18O = as.numeric(o_data$d18O_loess_smooth))
o_df1 = o_df1[(o_df1$age >= min(length_means$age)) & (o_df1$age <= max(length_means$age)), ]
#compute rolling mean of temperature data
roll <- data.frame(rollmean(o_df1, 100))
i <- 1
match_d18O <- c()
while(i <= length(length_means$age)) {
match_d18O[i] <- roll$d18O[which(abs(roll$age-length_means$age[i])==min(abs(roll$age-length_means$age[i])))]
i = i+1
}
match_d18O <- data.frame(age = length_means$age, d18O = match_d18O)
#test association with mean lengths
lm_1 = lm(length_means$mean_length ~ match_d18O$d18O)
summary(lm_1)
cor.test(match_d18O$d18O, length_means$mean_length, method = "spearman")
#cut to points <62 million years
d18O_62 <- match_d18O[-which(match_d18O$age > 62), ]
length_means_62 <- length_means[-which(length_means$age > 62), ]
#test association again
lm_2 = lm(length_means_62$mean_length ~ d18O_62$d18O)
summary(lm_2)
cor.test(d18O_62$d18O, length_means_62$mean_length, method = "spearman")
View(length_medians)
plot(length_medians)
View(d18O_IAR)
View(mean_length)
a <- lm(mean_length$mean_length~d18O_IAR$d18O)
a
summar(a)
plot(mean_length$mean_length~d18O_IAR$d18O)
summary(a)
plot(d18O_IAR$IAR~d18O_IAR$d18O)
summary(lm(d18O_IAR$IAR~d18O_IAR$d18O))
summary(a)
---
title: "exercise 10"
---
title: "exercise 10"
install.packages("tidyverse")
install.packages("tidyverse")
install.packages("tidyverse")
install.packages("tidyverse")
install.packages("phylobase")
knitr::opts_chunk$set(echo = TRUE)
# General data analysis packages
library(knitr)
library(tidyverse)
knitr::opts_chunk$set(echo = TRUE)
# General data analysis packages
library(knitr)
library(tidyverse)
library(magrittr)
# Phylogenetics packages
library(ape)
library(phylobase)
data(geospiza_raw)
